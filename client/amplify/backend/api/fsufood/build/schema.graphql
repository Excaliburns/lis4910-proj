type Preference {
  id: ID!
  preferences: [String]
  allergies: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPreferenceConnection {
  items: [Preference]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelPreferenceFilterInput {
  id: ModelIDInput
  preferences: ModelStringInput
  allergies: ModelStringInput
  and: [ModelPreferenceFilterInput]
  or: [ModelPreferenceFilterInput]
  not: ModelPreferenceFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getPreference(id: ID!): Preference
  listPreferences(filter: ModelPreferenceFilterInput, limit: Int, nextToken: String): ModelPreferenceConnection
}

input CreatePreferenceInput {
  id: ID
  preferences: [String]
  allergies: [String]
}

input UpdatePreferenceInput {
  id: ID!
  preferences: [String]
  allergies: [String]
}

input DeletePreferenceInput {
  id: ID
}

type Mutation {
  createPreference(input: CreatePreferenceInput!, condition: ModelPreferenceConditionInput): Preference
  updatePreference(input: UpdatePreferenceInput!, condition: ModelPreferenceConditionInput): Preference
  deletePreference(input: DeletePreferenceInput!, condition: ModelPreferenceConditionInput): Preference
}

input ModelPreferenceConditionInput {
  preferences: ModelStringInput
  allergies: ModelStringInput
  and: [ModelPreferenceConditionInput]
  or: [ModelPreferenceConditionInput]
  not: ModelPreferenceConditionInput
}

type Subscription {
  onCreatePreference: Preference @aws_subscribe(mutations: ["createPreference"])
  onUpdatePreference: Preference @aws_subscribe(mutations: ["updatePreference"])
  onDeletePreference: Preference @aws_subscribe(mutations: ["deletePreference"])
}
